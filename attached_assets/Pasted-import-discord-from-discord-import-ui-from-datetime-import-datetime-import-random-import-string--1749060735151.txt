import discord
from discord import ui
from datetime import datetime
import random
import string

class XerjoffStatusView(ui.View):
    def __init__(self):
        super().__init__(timeout=300)

    @ui.select(
        placeholder="Choose receipt type...",
        options=[
            discord.SelectOption(label="Order Confirmation", value="ordered"),
            discord.SelectOption(label="Payment Confirmation", value="payment")
        ]
    )
    async def status_select(self, interaction: discord.Interaction, select: ui.Select):
        if select.values[0] == "payment":
            await interaction.response.send_modal(XerjoffPaymentModal())
        elif select.values[0] == "ordered":
            await interaction.response.send_modal(XerjoffOrderModal())

class XerjoffPaymentModal(ui.Modal, title="Xerjoff Payment Confirmation"):
    referencenum = ui.TextInput(label="Reference Number", placeholder="VTLBMDOZI", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        from utils.db_utils import get_user_details
        user_details = get_user_details(interaction.user.id)
        
        if not user_details:
            await interaction.response.send_message("Please set up your credentials in settings first.", ephemeral=True)
            return

        name, street, city, zipp, country, email = user_details

        try:
            with open('receipt/xerjoffpayment.html', 'r', encoding='utf-8') as file:
                receipt_html = file.read()
            
            receipt_html = receipt_html.replace('{name}', name)
            receipt_html = receipt_html.replace('{referencenum}', self.referencenum.value)
            receipt_filename = f"xerjoff_payment_{self.referencenum.value}.html"
            
            embed = discord.Embed(
                title="Xerjoff Payment Receipt Generated",
                description=f"Receipt for reference number: **{self.referencenum.value}**\n\nChoose email delivery method:",
                color=discord.Color.from_str("#c2ccf8")
            )
            
            from emails.choise import EmailChoiceView
            view = EmailChoiceView(interaction.user.id, receipt_html, receipt_filename, 
                                 "customer@xerjoff.com", "Xerjoff Customer Service", 
                                 f"Payment Confirmation - {self.referencenum.value}")
            
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        except FileNotFoundError:
            await interaction.response.send_message("Xerjoff payment template not found.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Error generating receipt: {str(e)}", ephemeral=True)

class XerjoffOrderModal(ui.Modal, title="Xerjoff Order - Step 1/2"):
    # ... (keep all your existing modal fields) ...

    async def on_submit(self, interaction: discord.Interaction):
        if 'xerjoff_form_data' not in globals():
            global xerjoff_form_data
            xerjoff_form_data = {}
        
        xerjoff_form_data[str(interaction.user.id)] = {
            'productname': self.productname.value,
            'price': self.price.value,
            'currency': self.currency.value,
            'shipping': self.shipping.value,
            'tax': self.tax.value
        }
        
        embed = discord.Embed(
            title="You are almost done...",
            description="Complete the next modal to receive the receipt.",
            color=discord.Color.from_str("#c2ccf8")
        )
        
        view = ui.View()
        continue_button = ui.Button(label="Continue to Step 2", style=discord.ButtonStyle.green)
        
        async def continue_callback(button_interaction):
            if button_interaction.user.id != interaction.user.id:
                await button_interaction.response.send_message("You can't use this button.", ephemeral=True)
                return
            await button_interaction.response.send_modal(XerjoffOrderSecondModal())
        
        continue_button.callback = continue_callback
        view.add_item(continue_button)
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class xerjoffmodal(ui.Modal, title="Xerjoff Receipt Generator"):
    async def on_submit(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="Xerjoff Receipt Generator",
            description="Choose the type of receipt you want to generate:",
            color=discord.Color.from_str("#c2ccf8")
        )
        await interaction.response.send_message(embed=embed, view=XerjoffStatusView(), ephemeral=True)